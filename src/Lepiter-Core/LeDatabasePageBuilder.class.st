"
{{gtClass:LeDatabasePageBuilder}} extends {{gtClass:LePageBuilder}} by adding the ability to create a page which is only actually added to the database after the new page's title has been set.

This is enables an empty page to be added to a UI, but only be added to the database if the user decides to edit the page contents.	
## Examples
### Add Page with Unique Title
Add a new page with a unique title to a database: {{gtExample:LeDatabasePageBuilderExamples>>#addAutoGeneratedTitlePage}}
### Page With Empty Title
The following example shows a scenario in which a page is added when its title is set ({{gtMethod:LeDatabasePageBuilder>>#addOnlyAfterSettingTitle|label=#selector}}): {{gtExample:LeDatabasePageBuilderExamples>>#addLaterEmptyPage}}
## Internal Representation and Key Implementation Points.
### Instance Variables
	database:		<LeDatabase>


"
Class {
	#name : 'LeDatabasePageBuilder',
	#superclass : 'LePageBuilder',
	#instVars : [
		'database'
	],
	#category : 'Lepiter-Core-Builders'
}

{ #category : 'api - building' }
LeDatabasePageBuilder >> add [
	<return: #LePage>
	| aPage |
	aPage := self build.
	self database addPage: aPage.
	^ aPage
]

{ #category : 'api - building' }
LeDatabasePageBuilder >> addOnlyAfterSettingTitle [
	"Add the receiver's page to the database.  
	If the page title hasn't been set, defer adding until after the title is set.  This is allows an empty page to be added to a UI, but only actually added to the database if the user decides to edit the contents.	"
	<return: #LePage>
	| aPage |
	aPage := self build.
	aPage hasTitle
		ifTrue: [ self addPage: aPage to: self database ]
		ifFalse: [ self addPage: aPage laterTo: self database ].
	^ aPage
]

{ #category : 'private - building' }
LeDatabasePageBuilder >> addPage: aPage laterTo: aDatabase [
	"Schedule the page to be added to the database after its title has been set."
	aPage addedToDatabase: aDatabase.
	aPage 
		when: LePageTitleChanged 
		doOnce: [ :anAnnouncement | self addPage: aPage to: aDatabase ]
		for: { self. aPage }
]

{ #category : 'private - building' }
LeDatabasePageBuilder >> addPage: aPage to: aDatabase [
	aDatabase addPage: aPage
]

{ #category : 'api - accessing' }
LeDatabasePageBuilder >> database [
	^ database
]

{ #category : 'api - accessing' }
LeDatabasePageBuilder >> database: aDatabase [
	database = aDatabase ifTrue: [ ^ self ].
	database := aDatabase.
	self onDatabaseChanged.
]

{ #category : 'api - building' }
LeDatabasePageBuilder >> ensure [
	<return: #LePage>
	^ self database 
		pageNamed: self page title 
		ifAbsent: [ self add ]
]

{ #category : 'initialization' }
LeDatabasePageBuilder >> initialize [
	super initialize.
	database := LeDatabase null.
	self title: ''.
]

{ #category : 'private - instance creation' }
LeDatabasePageBuilder >> newUniqueTitle [
	| anIndex aTitle |
	anIndex := 1.
	[ 
		aTitle := 'Page ', anIndex asString.
		self database hasPageNamed: aTitle 
	] whileTrue: [ 
		anIndex := anIndex + 1.
	].
	^ aTitle
]

{ #category : 'private - hooks' }
LeDatabasePageBuilder >> onDatabaseChanged [
	self createdNowBy: self database userEmail.
]

{ #category : 'api - configuration' }
LeDatabasePageBuilder >> uniqueTitle [
	| aTitle |
	aTitle := self newUniqueTitle.
	self title: aTitle.
]
